addBlade[pMV_, pblade_] := Append[pMV, pblade]
 
normedPoint[pe1_, pe2_, pe3_] := {{0, 1}, {1, pe1}, {2, pe2}, {4, pe3}, 
     {8, Sqrt[pe1^2 + pe2^2 + pe3^2]}}
 
generalInverse[pMV_, pMetric_] := Module[{mvSize, mMatrix, lMax, i, j, 
      basisBlades, b, gp, invMatrix, v, result = {}}, 
     dim = Dimensions[pMV, 1][[1]]; lMax = BitShiftLeft[1, dim]; 
      mMatrix = Table[0, {i, 1, lMax}, {j, 1, lMax}]; 
      basisBlades = Table[blade[i - 1, 1], {i, 1, lMax}]; 
      Do[b = pMV[[i]]; Print["generalInverse b: ", b]; 
        Do[gp = geometricProduct[b, basisBlades[[j]], pMetric]; 
          mMatrix = addToMatrix[mMatrix, basisBlades[[j]], gp], 
         {j, 1, lMax}], {i, 1, dim}]; Print["generalInverse final mMatrix: ", 
       MatrixForm[mMatrix]]; invMatrix = Inverse[mMatrix]; 
      Print["generalInverse invMatrix: ", MatrixForm[invMatrix]]; 
      Do[v = invMatrix[[j,1]]; If[v != 0, basisBlades[[j,2]] = v; 
          result = Append[result, basisBlades[[j]]]], {j, 1, lMax}]; 
      Return[result]]
 
blade[pBitMap_, pWeight_] := {pBitMap, pWeight}
 
geometricProduct[pBladeA_, pBladeB_] := gpOp[pBladeA, pBladeB, False]
 
geometricProduct[pBladeA_, pBladeB_, pMetric_] := 
    Module[{listA = toEigenBasis[pBladeA, invMetricMatrix /. pMetric], 
      listB = toEigenBasis[pBladeB, invMetricMatrix /. pMetric], jMax, iMax, 
      gp, result = {}, bitmap, i = 0}, jMax = Dimensions[listA, 1][[1]]; 
      iMax = Dimensions[listB, 1][[1]]; 
      Do[Do[gp = geometricProduct[listA[[i]], listB[[j]]]; 
         result = Append[result, gp], {j, 1, jMax}], {i, 1, iMax}]; 
      result = mvSimplify[result]; result]
 
gpOp[pBladeA_, pBladeB_, pOuter_] := Module[{bBlade = {0, 0}, bitmap, sign}, 
     If[pOuter == True && BitAnd[pBladeA[[1]], pBladeB[[1]]] != 0, Null, 
       bitmap = BitXor[pBladeA[[1]], pBladeB[[1]]]; 
        sign = canonicalReorderingSign[pBladeA[[1]], pBladeB[[1]]]; 
        bBlade = blade[bitmap, sign*pBladeA[[2]]*pBladeB[[2]]]]; bBlade]
 
canonicalReorderingSign[pA_, pB_] := Module[{a = pA, sum = 0, sign = 1}, 
     If[IntegerQ[pA] && IntegerQ[pB], a = BitShiftRight[a, 1]; 
        While[a != 0, sum = sum + bitCount[BitAnd[a, pB]]; 
          a = BitShiftRight[a, 1]]]; sign = If[BitAnd[sum, 1] == 0, 1, -1, 
        Print[
         "canonicalReorderingSign called with non-integer inpput parameter!"]]\
; sign]
 
bitCount[pi_] := Module[{i = pi}, 
     i = i - BitAnd[BitShiftRight[i, 1], 1431655765]; 
      i = BitAnd[i, 858993459] + BitAnd[BitShiftRight[i, 2], 858993459]; 
      i = BitAnd[i + BitShiftRight[i, 4], 252645135]; 
      i = i + BitShiftRight[i, 8]; i = i + BitShiftRight[i, 16]; 
      BitAnd[i, 63]]
 
toEigenBasis[pblade_, pMatrix_] := transform[pblade, pMatrix]
 
transform[pBlade_, pMatrix_] := Module[{aList = {{0, pBlade[[2]]}}, 
      aBM = pBlade[[1]], maxj = Dimensions[pMatrix, 1][[1]], tmp, m, i = 1, 
      op}, While[aBM != 0, If[BitAnd[aBM, 1] != 0, 
         tmp = {}; Do[If[pMatrix[[j,i]] != 0, m = pMatrix[[j,i]]; 
             Do[op = outerProduct[aList[[k]], blade[2^(j - 1), m]]; tmp = 
                Append[tmp, op], {k, 1, Dimensions[aList, 1][[1]]}]], 
           {j, 1, maxj}]; aList = tmp]; aBM = BitShiftRight[aBM]; i = i + 1]; 
      aList]
 
outerProduct[pBladeA_, pBladeB_] := gpOp[pBladeA, pBladeB, True]
 
mvSimplify[pBladeList_] := Module[{result = {}, 
      dim = Dimensions[pBladeList][[1]], sortedA, i, current, b}, 
     If[dim == 0, result = pBladeList, sortedA = SortBy[pBladeList, Last]; 
        current = sortedA[[1]]; Do[b = sortedA[[i]]; 
          If[b[[1]] == current[[1]], current[[2]] = current[[2]] + b[[2]], 
           If[current[[2]] != 0., result = Append[result, current]; 
             current = b]], {i, 2, dim}]; If[current[[2]] != 0., 
         result = Append[result, current]]; ]; result]
 
addToMatrix[pMatrix_, pBeta_, pGamma_] := 
    Module[{v, aBlade, result = pMatrix}, 
     Do[aBlade := pGamma[[i]]; v = result[[aBlade[[1]] + 1,pBeta[[1]] + 1]]; 
        result[[aBlade[[1]] + 1,pBeta[[1]] + 1]] = v + aBlade[[2]], 
       {i, 1, Dimensions[pGamma, 1][[1]]}]; result]
